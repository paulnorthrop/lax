% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ismev.R
\name{ismev}
\alias{ismev}
\alias{alogLik.gev.fit}
\alias{alogLik.pp.fit}
\title{Loglikelihood adjustment of ismev fits}
\usage{
\method{alogLik}{gev.fit}(x, cluster = NULL, use_vcov = TRUE, ...)

\method{alogLik}{pp.fit}(x, cluster = NULL, use_vcov = TRUE, ...)
}
\arguments{
\item{x}{A fitted model object with certain associated S3 methods.
See \strong{Details}.}

\item{cluster}{A vector or factor indicating from which cluster the
  respective loglikelihood contributions from \code{loglik} originate.
  This must have the same length as the vector returned by the
  \code{logLikVec} method for object like \code{x}.
  If \code{cluster} is not supplied then it is assumed that
  each observation forms its own cluster.

  If the sandwich package
  \href{http://dx.doi.org/10.18637/jss.v016.i09}{(Zeleis, 2006)}
  is used to estimate the quantities required to adjust the loglikelihood
  (i.e. \code{use_sanswich = TRUE}) then \code{cluster} determines whether
  the variance matrix \code{V} of the score vector is estimated using
  \code{\link[sandwich]{meat}} (\code{cluster} is \code{NULL}) or
  \code{\link[sandwich:vcovCL]{meatCL}} (\code{cluster} is not \code{NULL}).
  See \code{use_sandwich} and \strong{Details}.}

\item{use_vcov}{A logical scalar.  Should we use the \code{vcov} S3 method
for \code{x} (if this exists) to estimate the Hessian of the independence
loglikelihood to be passed as the argument \code{H} to
\code{\link[chandwich]{adjust_loglik}}?
Otherwise, \code{H} is estimated inside
\code{\link[chandwich]{adjust_loglik}} using
\code{\link[stats:optim]{optimHess}}.}

\item{...}{Further arguments to be passed to the functions in the
sandwich package \code{\link[sandwich]{meat}}, if \code{cluster = NULL},
or \code{\link[sandwich:vcovCL]{meatCL}}, otherwise.}
}
\description{
Description
}
\examples{
# We need the evd package
got_ismev <- requireNamespace("ismev", quietly = TRUE)

if (got_ismev) {
  library(ismev)
  # An example from the ismev::gev.fit documentation
  gev_fit <- gev.fit(revdbayes::portpirie, show = FALSE)
  adj_gev_fit <- alogLik(gev_fit)
  summary(adj_gev_fit)

  # An example from chapter 6 of Coles (2001)
  data(fremantle)
  xdat <- fremantle[, "SeaLevel"]
  # Set year 1897 to 1 for consistency with page 113 of Coles (2001)
  ydat <- cbind(fremantle[, 1] - 1896, fremantle[, 3])
  gev_fit <- oogev.fit(xdat, ydat, mul = 1:2, show = FALSE)
  adj_gev_fit <- alogLik(gev_fit)
  summary(adj_gev_fit)

  # An example from the ismev::pp.fit documentation
  data(rain)
  rain_fit <- oopp.fit(rain, 10, show = FALSE)
  adj_rain_fit <- alogLik(rain_fit)
  summary(adj_rain_fit)

  # An example from chapter 7 of Coles (2001).
  # Code from demo ismev::wooster.temps
  data(wooster)
  x <- seq(along = wooster)
  usin <- function(x, a, b, d) {
   a + b * sin(((x - d) * 2 * pi) / 365.25)
  }
  wu <- usin(x, -30, 25, -75)
  ydat <- cbind(sin(2 * pi * x / 365.25), cos(2 * pi *x / 365.25))
  wooster.pp <- oopp.fit(-wooster, threshold = wu, ydat = ydat, mul = 1:2,
                         sigl = 1:2, siglink = exp, method = "BFGS")
  adj_pp_fit <- alogLik(wooster.pp)
  summary(adj_pp_fit)
}
}
